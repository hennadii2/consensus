version: "3.9"

services:
  frontend:
    image: frontend_docker:latest
    environment:
      - FE_NODE_ENV=development
      - FE_WEB_BACKEND_URI=http://backend:${WEB_BACKEND_PORT_INTERNAL}
    entrypoint: sh -c "yarn dev"
    volumes:
      - ../../typescript/web/src:/fe-app/src
    ports:
      - 3000:3000
    depends_on:
      - backend

  backend:
    image: common_fastapi_docker:latest
    environment:
      - WEB_BACKEND_ENV=${WEB_BACKEND_ENV}
      - WEB_BACKEND_LOG_LEVEL=${WEB_BACKEND_LOG_LEVEL}
      - WEB_BACKEND_PORT=${WEB_BACKEND_PORT_INTERNAL}
      - WEB_BACKEND_SEARCH_INDEX=mock-data
      - WEB_BACKEND_AUTOCOMPLETE_INDEX=mock-data
      - WEB_BACKEND_DISABLE_LARGE_MODELS=${WEB_BACKEND_DISABLE_LARGE_MODELS}
      - WEB_BACKEND_SERVICES_HOST=${WEB_SERVICES_URL_LOCAL}
      - ELASTIC_URI_LOCAL=${ELASTIC_URI_LOCAL_INTERNAL}
      - POSTGRES_URI_LOCAL=${POSTGRES_URI_LOCAL_INTERNAL}
      - REDIS_CACHE_URI_LOCAL=${REDIS_CACHE_URI_LOCAL_INTERNAL}
      - CLERK_JWT_VERIFICATION_KEY_LOCAL=${CLERK_JWT_VERIFICATION_KEY_LOCAL}
      - CONSENSUS_TEST_API_KEY=${CONSENSUS_TEST_API_KEY_LOCAL}
      - HUGGING_FACE_ACCESS_TOKEN=${HUGGING_FACE_ACCESS_TOKEN_LOCAL}
      - OPENAI_API_KEY=${OPENAI_API_KEY_LOCAL}
      - BASETEN_API_KEY=${BASETEN_API_KEY_LOCAL}
      - TRANSFORMERS_CACHE=/shared/common/cache
      - HF_DATASETS_CACHE=/shared/common/cache
      - HF_HOME=/shared/common/cache
    entrypoint: python main.py
    volumes:
      - ./backend/app/main.py:/shared/common/main.py
      - ./backend/app:/shared/common/web/backend/app
      - ../common:/shared/common/common
      - /etc/passwd:/etc/passwd:ro
      - /etc/group:/etc/group:ro
      - shared_common_data:/shared/common/data
      - shared_common_cache:/shared/common/cache
    ports:
      - ${WEB_BACKEND_PORT}:${WEB_BACKEND_PORT_INTERNAL}
    depends_on:
      db:
        condition: service_healthy
      search:
        condition: service_healthy
      cache:
        condition: service_healthy

  services:
    image: common_fastapi_docker:latest
    environment:
      - WEB_SERVICES_ENV=${WEB_SERVICES_ENV}
      - WEB_SERVICES_LOG_LEVEL=${WEB_SERVICES_LOG_LEVEL}
      - WEB_SERVICES_PORT=${WEB_SERVICES_PORT_INTERNAL}
      - WEB_SERVICES_DISABLE_LARGE_MODELS=${WEB_BACKEND_DISABLE_LARGE_MODELS}
      - HUGGING_FACE_ACCESS_TOKEN=${HUGGING_FACE_ACCESS_TOKEN_LOCAL}
      - OPENAI_API_KEY=${OPENAI_API_KEY_LOCAL}
      - TRANSFORMERS_CACHE=/shared/common/cache
      - HF_DATASETS_CACHE=/shared/common/cache
      - HF_HOME=/shared/common/cache
    entrypoint: python main.py
    volumes:
      - ./services/app/main.py:/shared/common/main.py
      - ./services/app:/shared/common/web/services/app
      - /etc/passwd:/etc/passwd:ro
      - /etc/group:/etc/group:ro
      - shared_common_data:/shared/common/data
      - shared_common_cache:/shared/common/cache
    ports:
      - ${WEB_SERVICES_PORT}:${WEB_SERVICES_PORT_INTERNAL}
    healthcheck:
      test: curl -s http://services:${WEB_SERVICES_PORT}/healthcheck >/dev/null || exit 1
      interval: 30s
      timeout: 10s
      retries: 5

  db:
    image: postgres:latest
    restart: always
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - ../../infra/db/main.sql:/docker-entrypoint-initdb.d/1.sql
    ports:
      - ${POSTGRES_PORT}:${POSTGRES_PORT_INTERNAL}
    healthcheck:
      test: pg_isready -U postgres -p ${POSTGRES_PORT_INTERNAL}
      interval: 5s
      timeout: 5s
      retries: 5
    logging:
      # Suppress log output
      driver: "none"

  search:
    image: elasticsearch:8.10.1
    environment:
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms750m -Xmx750m"
      - xpack.security.enabled=true
    volumes:
      - ../common/search/resources/stopwords.txt:/usr/share/elasticsearch/config/stopwords.txt
      - ../common/search/resources/synonyms.txt:/usr/share/elasticsearch/config/synonyms.txt
    ports:
      - ${ELASTIC_PORT}:${ELASTIC_PORT_INTERNAL}
      - ${ELASTIC_PORT_2}:${ELASTIC_PORT_INTERNAL_2}
    healthcheck:
      test: curl -s http://search:${ELASTIC_PORT_INTERNAL} >/dev/null || exit 1
      interval: 30s
      timeout: 10s
      retries: 5
    logging:
      # Suppress log output
      driver: "none"

  cache:
    image: redis:6.2-alpine
    restart: always
    volumes:
      - cache:/data
    ports:
      - ${REDIS_PORT}:${REDIS_PORT_INTERNAL}
    command: redis-server --save 20 1 --loglevel warning --requirepass ${REDIS_PASSWORD}
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 1s
      timeout: 3s
      retries: 5

volumes:
  cache:
  shared_common_data:
  shared_common_cache:
